"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9650],{3905:function(e,r,n){n.d(r,{Zo:function(){return s},kt:function(){return d}});var t=n(7294);function o(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function a(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function l(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?a(Object(n),!0).forEach((function(r){o(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function f(e,r){if(null==e)return{};var n,t,o=function(e,r){if(null==e)return{};var n,t,o={},a=Object.keys(e);for(t=0;t<a.length;t++)n=a[t],r.indexOf(n)>=0||(o[n]=e[n]);return o}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)n=a[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=t.createContext({}),c=function(e){var r=t.useContext(i),n=r;return e&&(n="function"==typeof e?e(r):l(l({},r),e)),n},s=function(e){var r=c(e.components);return t.createElement(i.Provider,{value:r},e.children)},u={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},p=t.forwardRef((function(e,r){var n=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,s=f(e,["components","mdxType","originalType","parentName"]),p=c(n),d=o,v=p["".concat(i,".").concat(d)]||p[d]||u[d]||a;return n?t.createElement(v,l(l({ref:r},s),{},{components:n})):t.createElement(v,l({ref:r},s))}));function d(e,r){var n=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var a=n.length,l=new Array(a);l[0]=p;var f={};for(var i in r)hasOwnProperty.call(r,i)&&(f[i]=r[i]);f.originalType=e,f.mdxType="string"==typeof e?e:o,l[1]=f;for(var c=2;c<a;c++)l[c]=n[c];return t.createElement.apply(null,l)}return t.createElement.apply(null,n)}p.displayName="MDXCreateElement"},5125:function(e,r,n){n.r(r),n.d(r,{frontMatter:function(){return f},contentTitle:function(){return i},metadata:function(){return c},toc:function(){return s},default:function(){return p}});var t=n(7462),o=n(3366),a=(n(7294),n(3905)),l=["components"],f={tags:["\u5251\u6307offer","\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"]},i="II_\u4e8c\u53c9\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148",c={unversionedId:"\u5251\u6307offer/offer68_236_II_\u4e8c\u53c9\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148",id:"\u5251\u6307offer/offer68_236_II_\u4e8c\u53c9\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148",isDocsHomePage:!1,title:"II_\u4e8c\u53c9\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148",description:"\u9898\u89e3 1.py",source:"@site/docs/\u5251\u6307offer/offer68_236_II_\u4e8c\u53c9\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148.md",sourceDirName:"\u5251\u6307offer",slug:"/\u5251\u6307offer/offer68_236_II_\u4e8c\u53c9\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148",permalink:"/leetcode/docs/\u5251\u6307offer/offer68_236_II_\u4e8c\u53c9\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/\u5251\u6307offer/offer68_236_II_\u4e8c\u53c9\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148.md",tags:[{label:"\u5251\u6307offer",permalink:"/leetcode/docs/tags/\u5251\u6307offer"},{label:"\u6df1\u5ea6\u4f18\u5148\u641c\u7d22",permalink:"/leetcode/docs/tags/\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"}],version:"current",frontMatter:{tags:["\u5251\u6307offer","\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"]},sidebar:"tutorialSidebar",previous:{title:"I_\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148",permalink:"/leetcode/docs/\u5251\u6307offer/offer68_235_I_\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148"},next:{title:"\u5251\u6307offer\u4e13\u9879\u7248",permalink:"/leetcode/docs/\u5251\u6307offer\u4e13\u9879\u7248/index"}},s=[{value:"\u9898\u89e3 1.py",id:"\u9898\u89e3-1py",children:[]},{value:"\u9898\u89e3 2_\u8fed\u4ee3.py",id:"\u9898\u89e3-2_\u8fed\u4ee3py",children:[]},{value:"\u9898\u89e3 2_\u904d\u5386.py",id:"\u9898\u89e3-2_\u904d\u5386py",children:[]}],u={toc:s};function p(e){var r=e.components,n=(0,o.Z)(e,l);return(0,a.kt)("wrapper",(0,t.Z)({},u,n,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"ii_\u4e8c\u53c9\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148"},"II_\u4e8c\u53c9\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148"),(0,a.kt)("h2",{id:"\u9898\u89e3-1py"},"\u9898\u89e3 1.py"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-.py"},"# ##\u5251\u6307offer#\u6df1\u5ea6\u4f18\u5148\u641c\u7d22##levele\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def lowestCommonAncestor(self, root: TreeNode, p: TreeNode, q: TreeNode) -> TreeNode:\n        def traval(target):\n            stack = []\n            def doTraval(cur):\n                stack.append(cur)\n                if cur.val == target.val:\n                    return True\n                if cur.left and doTraval(cur.left):\n                    return True\n                if cur.right and doTraval(cur.right):\n                    return True\n                stack.pop(-1)\n                return False\n            doTraval(root)\n            return stack\n        \n        ptravel = traval(p)\n        qtravel = traval(q)\n\n        for i in range(1, min(len(ptravel), len(qtravel))):\n            if ptravel[i] != qtravel[i]:\n                return ptravel[i-1]\n        \n        return ptravel[-1] if len(ptravel) < len(qtravel) else qtravel[-1]\n\n\n")),(0,a.kt)("h2",{id:"\u9898\u89e3-2_\u8fed\u4ee3py"},"\u9898\u89e3 2_\u8fed\u4ee3.py"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-.py"},"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def lowestCommonAncestor(self, root: TreeNode, p: TreeNode, q: TreeNode) -> TreeNode:\n        self.ans = None\n        def dfs(cur):\n            if not cur:\n                return False\n            left = dfs(cur.left)\n            righ = dfs(cur.right)\n\n            if (left and righ) or ((cur.val == p.val or cur.val == q.val) and (left or righ)):\n                self.ans = cur\n            \n            return left or righ or (cur.val == p.val or cur.val == q.val)\n        \n        dfs(root)\n        return self.ans\n\n")),(0,a.kt)("h2",{id:"\u9898\u89e3-2_\u904d\u5386py"},"\u9898\u89e3 2_\u904d\u5386.py"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-.py"},"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def lowestCommonAncestor(self, root: TreeNode, p: TreeNode, q: TreeNode) -> TreeNode:\n        parents = {}\n        def dfs(cur):\n            if not cur:\n                return\n            if cur.left:\n                parents[cur.left] = cur\n                dfs(cur.left)\n            if cur.right:\n                parents[cur.right] = cur\n                dfs(cur.right)\n        \n        dfs(root)\n        visited = {}\n        while p in parents:\n            visited[p] = True\n            p = parents[p]\n        while q in parents:\n            if q in visited:\n                return q\n            q = parents[q]\n        return root\n\n")))}p.isMDXComponent=!0}}]);