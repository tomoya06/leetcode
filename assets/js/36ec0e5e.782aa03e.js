"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4017],{3905:function(e,n,t){t.d(n,{Zo:function(){return s},kt:function(){return u}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function f(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):f(f({},n),e)),t},s=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),p=c(t),u=o,g=p["".concat(l,".").concat(u)]||p[u]||d[u]||a;return t?r.createElement(g,f(f({ref:n},s),{},{components:t})):r.createElement(g,f({ref:n},s))}));function u(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,f=new Array(a);f[0]=p;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i.mdxType="string"==typeof e?e:o,f[1]=i;for(var c=2;c<a;c++)f[c]=t[c];return r.createElement.apply(null,f)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},5455:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return i},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return s},default:function(){return p}});var r=t(7462),o=t(3366),a=(t(7294),t(3905)),f=["components"],i={tags:["\u5251\u6307offer","\u6df1\u5ea6\u4f18\u5148\u641c\u7d22","\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22"]},l="\u4e8c\u53c9\u6811\u4e2d\u548c\u4e3a\u67d0\u4e00\u503c\u7684\u8def\u5f84",c={unversionedId:"\u5251\u6307offer/offer34_113_\u4e8c\u53c9\u6811\u4e2d\u548c\u4e3a\u67d0\u4e00\u503c\u7684\u8def\u5f84",id:"\u5251\u6307offer/offer34_113_\u4e8c\u53c9\u6811\u4e2d\u548c\u4e3a\u67d0\u4e00\u503c\u7684\u8def\u5f84",isDocsHomePage:!1,title:"\u4e8c\u53c9\u6811\u4e2d\u548c\u4e3a\u67d0\u4e00\u503c\u7684\u8def\u5f84",description:"\u9898\u89e3 1.py",source:"@site/docs/\u5251\u6307offer/offer34_113_\u4e8c\u53c9\u6811\u4e2d\u548c\u4e3a\u67d0\u4e00\u503c\u7684\u8def\u5f84.md",sourceDirName:"\u5251\u6307offer",slug:"/\u5251\u6307offer/offer34_113_\u4e8c\u53c9\u6811\u4e2d\u548c\u4e3a\u67d0\u4e00\u503c\u7684\u8def\u5f84",permalink:"/leetcode/docs/\u5251\u6307offer/offer34_113_\u4e8c\u53c9\u6811\u4e2d\u548c\u4e3a\u67d0\u4e00\u503c\u7684\u8def\u5f84",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/\u5251\u6307offer/offer34_113_\u4e8c\u53c9\u6811\u4e2d\u548c\u4e3a\u67d0\u4e00\u503c\u7684\u8def\u5f84.md",tags:[{label:"\u5251\u6307offer",permalink:"/leetcode/docs/tags/\u5251\u6307offer"},{label:"\u6df1\u5ea6\u4f18\u5148\u641c\u7d22",permalink:"/leetcode/docs/tags/\u6df1\u5ea6\u4f18\u5148\u641c\u7d22"},{label:"\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22",permalink:"/leetcode/docs/tags/\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22"}],version:"current",frontMatter:{tags:["\u5251\u6307offer","\u6df1\u5ea6\u4f18\u5148\u641c\u7d22","\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22"]},sidebar:"tutorialSidebar",previous:{title:"\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u540e\u5e8f\u904d\u5386\u5e8f\u5217",permalink:"/leetcode/docs/\u5251\u6307offer/offer33_\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u540e\u5e8f\u904d\u5386\u5e8f\u5217"},next:{title:"\u590d\u6742\u94fe\u8868\u7684\u590d\u5236",permalink:"/leetcode/docs/\u5251\u6307offer/offer35_138_\u590d\u6742\u94fe\u8868\u7684\u590d\u5236"}},s=[{value:"\u9898\u89e3 1.py",id:"\u9898\u89e3-1py",children:[]},{value:"\u9898\u89e3 2_\u8282\u7701\u7a7a\u95f4.py",id:"\u9898\u89e3-2_\u8282\u7701\u7a7a\u95f4py",children:[]}],d={toc:s};function p(e){var n=e.components,t=(0,o.Z)(e,f);return(0,a.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"\u4e8c\u53c9\u6811\u4e2d\u548c\u4e3a\u67d0\u4e00\u503c\u7684\u8def\u5f84"},"\u4e8c\u53c9\u6811\u4e2d\u548c\u4e3a\u67d0\u4e00\u503c\u7684\u8def\u5f84"),(0,a.kt)("h2",{id:"\u9898\u89e3-1py"},"\u9898\u89e3 1.py"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-.py"},"# ##\u5251\u6307offer#\u6df1\u5ea6\u4f18\u5148\u641c\u7d22#\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22##levelm\n# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def pathSum(self, root: TreeNode, target: int) -> List[List[int]]:\n        res = []\n        def dfs(node, cur, newTarget):\n            if not node:\n                return\n            if not node.left and not node.right and node.val == newTarget:\n                res.append(cur+[node.val])\n                return\n            if node.left:\n                dfs(node.left, cur+[node.val], newTarget-node.val)\n            if node.right:\n                dfs(node.right, cur+[node.val], newTarget-node.val)\n        \n        dfs(root, [], target)\n        return res\n\n")),(0,a.kt)("h2",{id:"\u9898\u89e3-2_\u8282\u7701\u7a7a\u95f4py"},"\u9898\u89e3 2_\u8282\u7701\u7a7a\u95f4.py"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-.py"},"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def pathSum(self, root: TreeNode, target: int) -> List[List[int]]:\n        res = []\n        stacks = []\n        def dfs(node, newTarget):\n            if not node:\n                return\n            if not node.left and not node.right and node.val == newTarget:\n                res.append(stacks+[node.val])\n                return\n            if node.left:\n                stacks.append(node.val)\n                dfs(node.left, newTarget-node.val)\n                stacks.pop(-1)\n            if node.right:\n                stacks.append(node.val)\n                dfs(node.right, newTarget-node.val)\n                stacks.pop(-1)\n        \n        dfs(root, target)\n        return res\n\n")))}p.isMDXComponent=!0}}]);